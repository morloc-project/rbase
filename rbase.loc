module rbase {

type R Int = "integer";
type R Num = "numeric";
type R Str = "character";

source R from "R/core.R" (
   "mlc_id"            as id
 , "mlc_map"           as map
 , "mlc_zipWith"       as zipWith
 , "mlc_fold"          as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add"           as add
 , "mlc_sub"           as sub
 , "mlc_mul"           as mul
 , "mlc_div"           as div
 , "mlc_plotVectorPDF" as plotVectorPDF
)

export id
export map
export zipWith
export fold
export scan
export enumerateWith
export add
export sub
export mul
export div
export plotVectorPDF

-- exports from base R
source R (
   "sum"
 , "as.numeric" as ints2reals
 )

export sum
export ints2reals

sum :: [Num] -> Num;
sum R :: [Num] -> Num;


-- casting functions - these are all incorrectly typed. Not all values can be
-- cast into any of these types. Sound resolution of this problem will have to
-- await the addition of typeclasses.
ints2reals :: [Int] -> [Num];
ints2reals R :: ["integer"] -> ["numeric"];

id :: a -> a;
id R :: a -> a;

map :: (a -> b) -> [a] -> [b];
map R :: (a -> b) -> [a] -> [b];

zipWith :: (a -> b -> c) -> [a] -> [b] -> [c];
zipWith R :: (a -> b -> c) -> [a] -> [b] -> [c];

fold :: (b -> a -> b) -> b -> [a] -> b;
fold R :: (b -> a -> b) -> b -> [a] -> b;

scan :: (b -> a -> b) -> b -> [a] -> [b];
scan R :: (b -> a -> b) -> b -> [a] -> [b];

enumerateWith :: (a -> Int -> b) -> [a] -> [b];
enumerateWith R :: (a -> Int -> b) -> [a] -> [b];

add :: Num -> Num -> Num;
add R :: Num -> Num -> Num;

sub :: Num -> Num -> Num;
sub R :: Num -> Num -> Num;

mul :: Num -> Num -> Num;
mul R :: Num -> Num -> Num;

div :: Num -> Num -> Num;
div R :: Num -> Num -> Num;

plotVectorPDF :: [Num] -> Str -> ();
plotVectorPDF R :: [Num] -> Str -> ();


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

-- WARNING: The Map implementation in R is total crap. R doesn't have a general
-- map type, at least not in base. The `list` type works properly only for
-- string keys. So the Map type here is mostly just for testing purposes.
source R from "data.R" (
    "morloc_packMap" as packMap
  , "morloc_unpackMap" as unpackMap
)

export Map;

type R (Map key val) = "list" key val;

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val;
packMap R :: pack => ([key],[val]) -> "list" key val;

unpackMap :: unpack => Map key val -> ([key],[val]);
unpackMap R :: unpack => "list" key val -> ([key],[val]);

}
