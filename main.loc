source "R" from "core.R" (
   "map" as map 
 , "map" as zipWith
 , "fold" 
 , "enumerateWith"
 , "add"
 , "sub"
 , "mul"
 , "div"
);

map :: (a -> b) -> [a] -> b;
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c];
fold :: (b -> a -> b) -> b -> [a] -> b;
scan :: (b -> a -> b) -> b -> [a] -> [b];
enumerateWith :: (a -> Int -> b) -> [a] -> [b];
add :: Num -> Num -> Num;
sub :: Num -> Num -> Num;
mul :: Num -> Num -> Num;
div :: Num -> Num -> Num;

source "R" from "rbase.R" (
  -- unpackers
    "unpackCharacter"
  , "unpackDataFrame"
  , "unpackDataTable"
  , "unpackList"
  , "unpackLogical"
  , "unpackMatrix"
  , "unpackNumeric"
  , "unpackString"
  , "unpackInt"
  , "unpackNum"
  , "unpackBool"
  -- packers
  , "packCharacter"
  , "packDataFrame"
  , "packDataTable"
  , "packList"
  , "packLogical"
  , "packMatrix"
  , "packNumeric"
  , "packString"
  , "packInt"
  , "packNum"
  , "packBool"
  -- generic
  , "packGeneric"
  , "unpackGeneric"
)

packGeneric R :: packs => a -> "character";
unpackGeneric R :: unpacks => "character" -> a;

packCharacter R :: packs => "character" -> "character";
unpackCharacter R :: unpacks => "character" -> "character";

packDataFrame R :: packs => "data.frame" -> "character";
unpackDataFrame R :: unpacks => "character" -> "data.frame";

packDataTable R :: packs => "data.table" -> "character";
unpackDataTable R :: unpacks => "character" -> "data.table";

packList R :: packs => "list" -> "character";
unpackList R :: unpacks => "character" -> "list";

packLogical R :: packs => "logical" -> "character";
unpackLogical R :: unpacks => "character" -> "logical";

packMatrix R :: packs => "matrix" -> "character";
unpackMatrix R :: unpacks => "character" -> "matrix";

packNumeric R :: packs => "numeric" -> "character";
unpackNumeric R :: unpacks => "character" -> "numeric";

packString R :: packs => "character" -> "character";
unpackString R :: packs => "character" -> "character";

packInt R :: packs => "integer" -> "character";
unpackInt R :: packs => "character" -> "integer";

packNum R :: packs => "numeric" -> "character";
unpackNum R :: packs => "character" -> "numeric";

packBool R :: packs => "logical" -> "character";
unpackBool R :: packs => "character" -> "logical";
