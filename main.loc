module rbase {

source R from "core.R" (
   "map" as map 
 , "map" as zipWith
 , "fold" 
 , "enumerateWith"
 , "add"
 , "sub"
 , "mul"
 , "div"
 , "plotPDF"
)

export map
export zipWith
export fold
export scan
export enumerateWith
export add
export sub
export mul
export div
export plotPDF

map :: forall a b . (a -> b) -> [a] -> [b];
map R :: forall a b . (a -> b) -> vector a -> vector b;

zipWith :: forall a b c . (a -> b -> c) -> [a] -> [b] -> [c];
zipWith R :: forall a b c . (a -> b -> c) -> vector a -> vector b -> vector c;

fold :: forall a b . (b -> a -> b) -> b -> [a] -> b;
fold R :: forall a b . (b -> a -> b) -> b -> vector a -> b;

scan :: forall a b . (b -> a -> b) -> b -> [a] -> [b];
scan R :: forall a b . (b -> a -> b) -> b -> vector a -> vector b;

enumerateWith :: forall a b . (a -> Int -> b) -> [a] -> [b];
enumerateWith R :: forall a b . (a -> Int -> b) -> vector a -> vector b;

add :: Num -> Num -> Num;
add R :: "numeric" -> "numeric" -> "numeric";

sub :: Num -> Num -> Num;
sub R :: "numeric" -> "numeric" -> "numeric";

mul :: Num -> Num -> Num;
mul R :: "numeric" -> "numeric" -> "numeric";

div :: Num -> Num -> Num;
div R :: "numeric" -> "numeric" -> "numeric";

plotPDF :: forall a . a -> Str -> ();
plotPDF R :: forall a . a -> character -> ();

export unpackVectorStr
export unpackVectorLog
export unpackVectorInt
export unpackVectorNum
export unpackScalarStr
export unpackScalarLog
export unpackScalarInt
export unpackScalarNum
export unpackList
export unpackDataFrame
export unpackMatrix
export packVectorStr
export packVectorLog
export packVectorInt
export packVectorNum
export packScalarStr
export packScalarLog
export packScalarInt
export packScalarNum
export packList
export packDataFrame
export packMatrix
export packGeneric

source R from "rbase.R" (
  -- unpackers
    "unpackNull"
  , "unpackVectorStr"
  , "unpackVectorLog"
  , "unpackVectorInt"
  , "unpackVectorNum"
  , "unpackScalarStr"
  , "unpackScalarLog"
  , "unpackScalarInt"
  , "unpackScalarNum"
  , "unpackList"
  , "unpackDataFrame"
  , "unpackMatrix"
  -- packers
  , "packNull"
  , "unpackVectorStr"
  , "packVectorStr"
  , "packVectorLog"
  , "packVectorInt"
  , "packVectorNum"
  , "packScalarStr"
  , "packScalarLog"
  , "packScalarInt"
  , "packScalarNum"
  , "packList"
  , "packDataFrame"
  , "packMatrix"
  -- generic
  , "packGeneric"
  , "unpackGeneric"
)


packGeneric R :: packs => forall a . a -> "character";
unpackGeneric R :: unpacks => forall a . "character" -> a;

packNull R :: packs => () -> "character";
unpackNull R :: unpacks => "character" -> ();

-- scalar packers
packScalarStr R :: packs => "character" -> "character";
unpackScalarStr R :: unpacks => "character" -> "character";

packScalarLog R :: packs => "logical" -> "character";
unpackScalarLog R :: unpacks => "character" -> "logical";

packScalarInt R :: packs => "integer" -> "character";
unpackScalarInt R :: unpacks => "character" -> "integer";

packScalarNum R :: packs => "numeric" -> "character";
unpackScalarNum R :: unpacks => "character" -> "numeric";


-- vector packers
packVectorStr R :: packs => vector "character" -> "character";
unpackVectorStr R :: unpacks => "character" -> vector "character";

packVectorLog R :: packs => vector "logical" -> "character";
unpackVectorLog R :: unpacks => "character" -> vector "logical";

packVectorNum R :: packs => vector "numeric" -> "character";
unpackVectorNum R :: unpacks => "character" -> vector "numeric";

packVectorInt R :: packs => vector "integer" -> "character";
unpackVectorInt R :: unpacks => "character" -> vector "integer";


-- container packers
packList R :: packs => "list" -> "character";
unpackList R :: unpacks => "character" -> "list";

packDataFrame R :: packs => "data.frame" -> "character";
unpackDataFrame R :: unpacks => "character" -> "data.frame";

packMatrix R :: packs => forall a . matrix a -> "character";
unpackMatrix R :: unpacks => forall a . "character" -> matrix a;

}
